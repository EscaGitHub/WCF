<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChangedNomenclatureQuery" xml:space="preserve">
    <value>declare @variableId1 as int = (select VariableID from Variable where VariableName = N'спр_Служебная_запись' and IsDeleted = 0);
declare @variableId2 as int = (select VariableID from Variable where VariableName = N'_Артикул_для_1С' and IsDeleted = 0);
declare @statusVariableId as int = (select VariableID from Variable where VariableName = N'_Статус_передачи_номенклатуры' and IsDeleted = 0);
select
docs.DocumentID as N'Идентификатор документа'
,case when revisions.RevNr is null then 0 else revisions.RevNr end as N'Версия документа'
,docConfigs.ConfigurationName as N'Имя конфигурации документа'
,revisions.Date as N'Дата создания версии'
,Variable1Values.ValueText as N'спр_Служебная_запись'
,Variable2Values.ValueText as N'_Артикул_для_1С'
,StatusVariableValues.ValueText as N'_Статус_передачи_номенклатуры'
,cast((case when revisions.RevNr is null then 0 else revisions.RevNr end) as nvarchar(max)) as N'&lt;Номер версии&gt;'
,folders.Path as N'&lt;Путь к папке файла&gt;'
,docs.FileName as N'&lt;Имя файла&gt;'
from DocumentRevisionConfiguration
inner join DocumentConfiguration as docConfigs on docConfigs.ConfigurationID = DocumentRevisionConfiguration.ConfigurationID
inner join Documents as docs on docs.DocumentID = DocumentRevisionConfiguration.DocumentID
inner join Revisions as revisions on revisions.RevNr = DocumentRevisionConfiguration.RevisionNo and revisions.DocumentID = docs.DocumentID
                and revisions.RevNr = (select max(UserRevs.RevNr) from UserRevs where DocumentID = docs.DocumentId)
left join VariableValue as Variable1Values on Variable1Values.DocumentID = docs.DocumentId
and Variable1Values.ConfigurationID = docConfigs.ConfigurationID
and Variable1Values.VariableID = @variableId1 
and Variable1Values.RevisionNo = (select max(RevisionNo) from VariableValue where DocumentID = docs.DocumentId 
                                        and ConfigurationID = docConfigs.ConfigurationID
										and VariableID = @variableId1
										and RevisionNo &lt;= revisions.RevNr)
left join VariableValue as Variable2Values on Variable2Values.DocumentID = docs.DocumentId
and Variable2Values.ConfigurationID = docConfigs.ConfigurationID
and Variable2Values.VariableID = @variableId2 
and Variable2Values.RevisionNo = (select max(RevisionNo) from VariableValue where DocumentID = docs.DocumentId 
                                        and ConfigurationID = docConfigs.ConfigurationID
										and VariableID = @variableId2
										and RevisionNo &lt;= revisions.RevNr)
left join VariableValue as StatusVariableValues on StatusVariableValues.DocumentID = docs.DocumentId
and StatusVariableValues.ConfigurationID = docConfigs.ConfigurationID
and StatusVariableValues.VariableID = @statusVariableId 
and StatusVariableValues.RevisionNo = (select max(RevisionNo) from VariableValue where DocumentID = docs.DocumentId 
                                        and ConfigurationID = docConfigs.ConfigurationID
										and VariableID = @statusVariableId
										and RevisionNo &lt;= revisions.RevNr)
cross apply (select top 1
DocumentID
,Path
,CASE WHEN folders.Path like('\Проекты\%') 
OR folders.Path like('\Справочники\%') 
THEN 1 ELSE 0 END as TruePath
from DocumentsInProjects as docsInProject 
inner join Projects as folders on folders.ProjectID = docsInProject.ProjectID
where docsInProject.Deleted != 1 and docsInProject.DocumentID = docs.DocumentID
order by TruePath desc) as folders
where
StatusVariableValues.ValueText = N'В разработке' and folders.TruePath = 1</value>
  </data>
</root>